application {
  config {
    applicationType monolith
    authenticationType jwt
    baseName PowerTrainer
    blueprints []
    buildTool maven
    cacheProvider ehcache
    clientFramework angularX
    clientPackageManager npm
    clientTheme materia
    clientThemeVariant primary
    creationTimestamp 1617912526482
    databaseType sql
    devDatabaseType h2Disk
    dtoSuffix DTO
    enableHibernateCache true
    enableSwaggerCodegen true
    enableTranslation true
    jhiPrefix jhi
    jhipsterVersion "7.0.1"
    jwtSecretKey "ZGY5MTI3OGI4OGFlMDVlMzNhMjlhODYzOTMyMjAyNjgwNTIwOTkxYTA1YjI2ZTIyZThkYTUwOTIxNGE4OGI3MTUwOWE2YmYzYTFlYzBlYTk0OGZjMmI5YzE5Y2VmNjMzNjQ5YWY5OThiNGE4OWNiYTgxNjk3M2UyZmY3ZDQ5MjU="
    languages [en, it]
    messageBroker false
    nativeLanguage en
    otherModules []
    packageName com.abubusoft.powertrainer
    prodDatabaseType postgresql
    reactive false
    searchEngine false
    serverPort 8080
    serviceDiscoveryType false
    skipClient false
    skipServer false
    skipUserManagement false
    testFrameworks []
    websocket false
    withAdminUi true
  }

  entities *
}

entity Language(languages) {
	code	String  unique required,
	name 	String	required
}

entity Translation(translations) {
  entityType String required,
  entityUuid String required,
	value  String  required
}

entity Calendar(calendars) {
	uuid	UUID	unique required,
	name 	String	required,
  owner String required
}

entity Exercise(exercises) {
	uuid		UUID        unique required ,
	image		ImageBlob                   ,
  name		String      required        ,
  description TextBlob                ,
  valueType	ValueType                 ,
  owner String required
}

entity ExerciseValue(exerciseValues) {
  uuid	                 UUID           unique required ,
  date	                 ZonedDateTime  required        ,
  exerciseUuid			     UUID           required        ,
  exerciseName			     String         required        ,
  exerciseValue			     Integer        required        ,
  exerciseValueType		   ValueType      required
}

entity ExerciseTool(exerciseTools) {
	uuid           UUID          unique required  ,
  image		       ImageBlob                      ,
  name		      String        required         ,
  description   TextBlob
}

enum ValueType {
	DURATION        ,
    WEIGHT          ,
    DISTANCE        ,
    REPETITIONS
}

entity Misuration(misurations) {
	uuid	UUID            unique required ,
    date	ZonedDateTime   required        ,
    value   Integer         required        ,
    image	ImageBlob               ,
    note	TextBlob
}

entity MisurationType(misurationTypes) {
	uuid	UUID    unique required ,
	name    String  required        ,
	image	ImageBlob               ,
    description	TextBlob
}


entity WorkoutSheet(workoutSheets) {
	uuid	UUID	unique required     ,
	name			String required       , // nome
  image			ImageBlob             ,
  description		TextBlob          ,
	owner			String,

	prepareTime		Integer           ,	// tempo di preparazione (s)
  coolDownTime	Integer           ,	// tempo di defaticamento (s)
  cycles			Integer             ,	// # di cicli di esercizi
  cycleRestTime	Integer           ,	// tempo di riposo tra cicli
  set				Integer               ,	// per ogni ciclo, quante volte devo ripetere un esercizio
  setRestTime		Integer           ,   // tempo di riposo tra esercizi
  type			WorkoutType	             // tipo di workout
}

entity WorkoutSheetExercise(workoutSheetExercises) {
  uuid			    UUID	unique required ,
  order			    Integer               ,
  repetitions		Integer               ,
  exerciseUuid			    UUID        required,
  exerciseName			    String      required,
  exerciseValue			    Integer     required,
  exerciseValueType		  ValueType     required
}

enum WorkoutType {
	SEQUENCE    ,	// le serie dei vari esercizi vengono fatte in sequenza
  SUPERSET	    // una serie per ogni esercizio
}

/*
 * Il workout viene generato a partire da un workout sheet
 * o manualmente. Gli step vengono inseriti manualmente o
 * sempre dallo sheet vengono generati per l'occasione
 */
entity Workout(workouts) {
	uuid			UUID	unique required ,
	name			String                  , // nome
	image			ImageBlob               ,
    type			WorkoutType             ,	// tipo di workout

    executionTime	Integer                 , // tempo di esecuzione
    previewTime		Integer                 , // tempo di esecuzione previsto

    status			WorkoutStatus           ,

    date	        ZonedDateTime          ,
    note	        String
}

entity WorkoutStep {
	uuid			UUID    unique required     ,
	order			Integer                     ,
    executionTime	Integer                     ,   // tempo di esecuzione
    type			WorkoutStepType             ,
    status			WorkoutStatus				,
    exerciseUuid			    UUID        required,
  	exerciseName			    String      required,
  	exerciseValue			    Integer     required,
  	exerciseValueType		  ValueType     required
}

enum WorkoutStepType {
	PREPARE_TIME    ,
    COOL_DOWN_TIME  ,
	CYCLE_REST      ,
	REPETITION_REST ,
    EXERCISE
}

enum WorkoutStatus {
	SCHEDULED       ,
    CANCELLED       ,
    DONE
}

enum ExerciseType {
  ANEROBIC          ,
  AEROBIC           ,
  STRETCHING		,
  UNDEFINED
}

entity Device (devices) {
    owner 		String required         ,
    deviceUuid 	String required unique
}

entity Muscle(muscles) {
	uuid	UUID	unique required ,
    name	String      required    ,
    image	ImageBlob               ,
    note	String
}

entity Note(notes) {
	uuid		UUID	    unique required ,
	type		NoteType    required        ,
    url			String                      ,
    image		ImageBlob                   ,
    description	TextBlob
}

enum NoteType {
    VIDEO ,
    TEXT,
    URL
}

relationship OneToMany {
    Exercise to Note                    ,

    Calendar to ExerciseValue,
    Calendar to Misuration  ,
    Calendar to Workout       ,

    MisurationType    to Misuration       ,
    Language          to Translation  ,

    Workout  to WorkoutStep   ,
    WorkoutSheet to WorkoutSheetExercise
}

relationship ManyToMany {
  Exercise to Muscle,
  Exercise to ExerciseTool
}

paginate * with pagination
service * with serviceImpl
filter *
